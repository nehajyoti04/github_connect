<?php

/**
 * @file
 * Gives site visitors the ability to log in with GitHub (http://github.com).
 */
use Drupal\Core\Url;

/**
 * Implements hook_help().
 * @param $route_name
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 */
function github_connect_help($route_name) {
  switch ($route_name) {
    case 'help.page.github':
      return t('Gives site visitors the ability to login to Drupal with their GitHub account.');
  }
}

/**
 * Implements hook_user_delete().
 */
function github_connect_user_delete(\Drupal\user\UserInterface $account) {
  // Delete the user from github_connect_users table.
  if (github_connect_get_user_token($account->id())) {
    db_delete('github_connect_users')
      ->condition('uid', $account->id())
      ->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function github_connect_form_user_login_block_alter(&$form, &$form_state) {
  _github_connect_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function github_connect_form_user_login_alter(&$form, &$form_state) {
  _github_connect_user_login_form_alter($form, $form_state);
}

function _github_connect_user_login_form_alter(&$form, &$form_state) {
  $form['#attached']['css'][] = drupal_get_path('module', 'github_connect') . '/github_connect.css';

  $items = array();
  $items[] = array(
    'data' => $this->github_connect_connect_block(),
    'class' => array('github-link'),
  );

  $form['github_links'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#attributes' => array('class' => array('github-links')),
    '#weight' => 1,
  );
  $form['github_connect.return_to'] = array('#type' => 'hidden', '#value' => \Drupal::url('openid/authenticate', array('absolute' => TRUE, 'query' => user_login_destination())));
}

/**
 * Get GitHub access token for User
 *
 * @param $uid User user id
 * @return $token Access token from GitHub
 */
function github_connect_get_user_token($uid) {
  if ($uid) {
    $result = db_select('github_connect_users', 'g_u')
      ->fields('g_u', array('uid', 'access_token'))
      ->condition('uid', $uid, '=')
      ->execute()
      ->fetchAssoc();

    $token = $result['access_token'];
    return $token;
  }
}

/**
 * GitHub connect block.
 */
function github_connect_connect_block() {
  global $base_url;

//  if (!(\Drupal::currentUser()->isAnonymous())) {
//    return FALSE;
//  }
//
//  $client_id = \Drupal::state()->get('github_connect_client_id');
//
//  $current_request = \Drupal::service('request_stack')->getCurrentRequest();
//
//  $destination = $current_request->query->get('destination');
//
//  $option = [
//    'query' => ['client_id' => $client_id, 'scope' => 'user,public', 'uri' => urlencode($base_url . '/github/register/create?destination=' . $destination['destination'])
//    ],
//  ];
//  $link = Url::fromUri('https://github.com/login/oauth/authorize', $option);
////    $link = Url::fromUri('https://github.com/login/oauth/authorize?client_id=');
//  $output = \Drupal::l(t('Login with GitHub'), $link);
//
//  return $output;
}

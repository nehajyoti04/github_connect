<?php

/**
 * @file
 * Install, update and uninstall functions for GitHub connect module.
 */

/**
 * Implements hook_install().
 */
function github_connect_install() {
}

/**
 * Implements hook_uninstall().
 */
function github_connect_uninstall() {
  // Delete our module's variable from the variables table.
  \Drupal::state()->delete('github_connect.admin_config');
}

/**
 * Implements hook_schema().
 */
function github_connect_schema() {
  $schema['github_connect_users'] = array(
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'access_token' => array(
        'description' => 'Token key',
        'type'        => 'text',
        'not null'    => TRUE,
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid'),
  );

  // Setting our own external authentication functionality.
  $schema['authmap'] = array(
    'description' => 'Stores distributed authentication mapping.',
    'fields' => array(
      'uid' => array(
        'description' => 'Primary key: {users}.uid for user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'provider' => array(
        'description' => 'The name of the authentication provider providing the authname',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'authname' => array(
        'description' => 'Unique authentication name provided by authentication provider',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'Extra (serialized) data to store with the authname.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('uid', 'provider'),
    'indexes' => array(
      'uid' => array('uid'),
      'auth_provider' => array('authname', 'provider'),
    ),
    'foreign keys' => array(
      'uid' => array('users' => 'uid'),
    ),
  );

  return $schema;
}
